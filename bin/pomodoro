#!/usr/bin/env node

//     pomodoro-timer
//     Copyright (c) 2013 Nick Baugh <niftylettuce@gmail.com>
//     MIT Licensed

//
// Free Pomodoro® Technique CLI timer built with Node.
//
// The Pomodoro Technique® and Pomodoro™ are
//  registered trademarks of Francesco Cirillo.
//

// * Author: [@niftylettuce](https://twitter.com/#!/niftylettuce)
// * Source: <https://github.com/niftylettuce/pomodoro-timer>

// # pomodoro-timer

var growl     = require('growl')
  , program   = require('commander')
  , path      = require('path')
  , fs        = require('fs')
  , player    = require('play')
  , Machine   = require('micro-machine')
  , Progress  = require('../ext/progress')
  , clc       = require('cli-color')
  , time      = require('humanize-time')
  , repeat    = require('repeat-time')
  , after     = require('after-time')

  , version   = require('../package').version
  , pomodoro  = path.join(__dirname, '..', 'assets', 'pomodoro-timer.png')
  , start     = path.join(__dirname, '..', 'assets', 'start.wav')
  , done      = path.join(__dirname, '..', 'assets', 'done.wav')

program
  .version(version)
  .option('-t, --task <name>', 'task name')
  .parse(process.argv)


var progressBar = {
  render: function(format, minutes){
    // TODO: remove when/if this PR is merged:
    // https://github.com/visionmedia/node-progress/pull/76
    var bar  = new Progress(format, {
      total: minutes * 60,
      width: 25,
      formatter: function(eta, elapsed, percent){
        return this.fmt
        .replace(':current', this.curr)
        .replace(':total', this.total)
        .replace(':elapsed', isNaN(elapsed) ? '0.0' : time(elapsed))
        .replace(':eta', (isNaN(eta) || !isFinite(eta)) ? '0.0' : (eta / 1000)
                 .toFixed(1))
                 .replace(':percent', percent.toFixed(0) + '%')
      }
    })
    clearInterval(this.tick)
    bar.tick()
    this.tick = repeat('1 s', function(){ bar.tick() })
  }
}

function notifyGrowl(opts, next){
  var opts = opts || {},
     name = opts.name,
     isBreak = /break/.test(name),
     duration = opts.duration || '25 minutes',
     title = 'Pomodoro - ' + duration + ' remaining'

  growl(name, { title: title, image: pomodoro })
  after(duration, function() { next() })
}

if (program.task){
  init(program.task)
} else {
  program.help()
}

function init(task){
  var machine = new Machine('break')
  machine.breakCounter = 0

  machine.transitionsFor.change = { work: 'break', break: 'work' }
  machine.on('change', function(machine){
    if(machine.state === "break"){
      machine.takeBreak()
    } else {
      machine.workOn(task)
    }
  })

  machine.workOn = function(task){
    progressBar.render(clc.red(task + ' :bar :percent :elapsed'), 25)
    player.sound(start)
    notifyGrowl({name: task}, function(){
      player.sound(done)
      machine.trigger('change')
    })
  }

  machine.takeBreak = function(isLong){
    this.breakCounter++

    var isLong = machine.breakCounter % 4 == 0,
        minutes = isLong ? 30 : 5,
        duration = minutes.toString() + " minutes",
        title   = isLong ? "long break" : "short break"

    progressBar.render(clc.green(title + ' :bar :percent :elapsed'), minutes)
    notifyGrowl({name: title, duration: duration}, function(){
      machine.trigger('change')
    })
  }

  machine.trigger('change')
}
